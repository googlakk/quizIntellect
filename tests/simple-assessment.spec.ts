import { test, expect } from '@playwright/test';

test.describe('Simple Assessment Test Check', () => {
  test('should access application and check test interface', async ({ page }) => {
    console.log('üß™ –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ—Ü–µ–Ω–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...');
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await page.goto('http://localhost:8082');
    await page.waitForLoadState('networkidle');
    
    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤
    await page.goto('http://localhost:8082/tests');
    await page.waitForLoadState('networkidle');
    
    // –ò—â–µ–º –ª—é–±—ã–µ —Ç–µ—Å—Ç—ã
    const testCards = page.locator('.card');
    const testCount = await testCards.count();
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${testCount}`);
    
    if (testCount > 0) {
      // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç
      const firstTestLink = page.locator('a[href*="/test/"]').first();
      if (await firstTestLink.isVisible()) {
        const testUrl = await firstTestLink.getAttribute('href');
        console.log(`üîó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ—Å—Ç—É: ${testUrl}`);
        
        await firstTestLink.click();
        await page.waitForLoadState('networkidle');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–µ—Å—Ç–∞
        const pageTitle = await page.title();
        console.log(`üìù –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${pageTitle}`);
        
        // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ç–µ—Å—Ç–∞
        const questionText = page.locator('h2, h3, .text-lg');
        if (await questionText.first().isVisible()) {
          const firstQuestion = await questionText.first().textContent();
          console.log(`‚ùì –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å: ${firstQuestion?.substring(0, 50)}...`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –∏–ª–∏ —à–∫–∞–ª—ã –æ—Ü–µ–Ω–æ–∫
        const radioButtons = page.locator('input[type="radio"]');
        const radioCount = await radioButtons.count();
        console.log(`üîò –ù–∞–π–¥–µ–Ω–æ radio buttons: ${radioCount}`);
        
        // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —à–∫–∞–ª—ã –æ—Ü–µ–Ω–æ–∫
        const assessmentLabels = page.locator('text*="–≤–ª–∞–¥–µ—é"');
        const assessmentCount = await assessmentLabels.count();
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —à–∫–∞–ª—ã: ${assessmentCount}`);
        
        // –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ü–µ–Ω–æ—á–Ω–æ–º —Ç–µ—Å—Ç–µ
        const assessmentInfo = page.locator('text*="–û—Ü–µ–Ω–æ—á–Ω—ã–π"');
        if (await assessmentInfo.isVisible()) {
          console.log('üéØ –ù–∞–π–¥–µ–Ω –æ—Ü–µ–Ω–æ—á–Ω—ã–π —Ç–µ—Å—Ç!');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
          const selfEvalText = page.locator('text*="—Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞"');
          if (await selfEvalText.isVisible()) {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –æ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–µ');
          }
          
          // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —à–∫–∞–ª—ã
          const scaleElements = [
            'text*="–ü–ª–æ—Ö–æ –≤–ª–∞–¥–µ—é"',
            'text*="–ë–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏"', 
            'text*="–•–æ—Ä–æ—à–æ –≤–ª–∞–¥–µ—é"',
            'text*="–û—Ç–ª–∏—á–Ω–æ –≤–ª–∞–¥–µ—é"'
          ];
          
          for (const selector of scaleElements) {
            const element = page.locator(selector);
            if (await element.isVisible()) {
              console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —à–∫–∞–ª—ã: ${selector}`);
            }
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–ª—ã
          const pointsElements = page.locator('text*="–±–∞–ª–ª"');
          const pointsCount = await pointsElements.count();
          console.log(`üíØ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –±–∞–ª–ª–∞–º–∏: ${pointsCount}`);
          
        } else {
          console.log('üìù –û–±—ã—á–Ω—ã–π —Ç–µ—Å—Ç');
          
          // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
          if (radioCount > 0) {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤');
          }
        }
        
        // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        await page.screenshot({ 
          path: 'test-interface-screenshot.png',
          fullPage: true 
        });
        console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: test-interface-screenshot.png');
        
      } else {
        console.log('‚ùå –°—Å—ã–ª–∫–∏ –Ω–∞ —Ç–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
    } else {
      console.log('‚ùå –¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
  });

  test('should check specific assessment test', async ({ page }) => {
    console.log('üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ü–µ–Ω–æ—á–Ω—ã–π —Ç–µ—Å—Ç...');
    
    const testId = '4cf1b10a-4418-4b4b-8195-db432d216c73';
    await page.goto(`http://localhost:8082/test/${testId}`);
    await page.waitForLoadState('networkidle');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –±–µ–∑ –æ—à–∏–±–æ–∫
    const errorMessages = page.locator('text*="–æ—à–∏–±–∫–∞"');
    const errorCount = await errorMessages.count();
    
    if (errorCount > 0) {
      console.log('‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
      const errorText = await errorMessages.first().textContent();
      console.log(`   –û—à–∏–±–∫–∞: ${errorText}`);
    } else {
      console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –±–µ–∑ –æ—à–∏–±–æ–∫');
    }
    
    // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ—Å—Ç–∞
    const testTitle = page.locator('h1, h2').first();
    if (await testTitle.isVisible()) {
      const title = await testTitle.textContent();
      console.log(`üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${title}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç–µ—Å—Ç–∞
    const assessmentBadge = page.locator('text*="–û—Ü–µ–Ω–æ—á–Ω—ã–π —Ç–µ—Å—Ç"');
    if (await assessmentBadge.isVisible()) {
      console.log('üéØ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: —ç—Ç–æ –æ—Ü–µ–Ω–æ—á–Ω—ã–π —Ç–µ—Å—Ç');
      
      // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —à–∫–∞–ª—ã –æ—Ü–µ–Ω–æ–∫  
      const scaleItems = page.locator('[role="radiogroup"] > div');
      const scaleCount = await scaleItems.count();
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —à–∫–∞–ª—ã: ${scaleCount}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —à–∫–∞–ª—ã
      for (let i = 0; i < Math.min(scaleCount, 4); i++) {
        const scaleItem = scaleItems.nth(i);
        const text = await scaleItem.textContent();
        console.log(`   ${i + 1}. ${text?.trim()}`);
      }
      
    } else {
      console.log('üìù –û–±—ã—á–Ω—ã–π —Ç–µ—Å—Ç –∏–ª–∏ —Ç–µ—Å—Ç –µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω');
    }
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    await page.screenshot({ 
      path: 'specific-test-screenshot.png',
      fullPage: true 
    });
    console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: specific-test-screenshot.png');
  });
});