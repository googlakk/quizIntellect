// Supabase Edge Function –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ò–ò —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å –ø–æ–º–æ—â—å—é Gemini API
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

interface RequestBody {
  testResultId: string;
  userId: string;
  testId: string;
  aiGoal: string;
  userAnswers: any[];
  testData: {
    title: string;
    description?: string;
    questions: any[];
  };
  userProfile: {
    full_name: string;
  };
}

serve(async (req) => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ CORS preflight –∑–∞–ø—Ä–æ—Å–æ–≤
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const requestBody: RequestBody = await req.json()
    const { testResultId, userId, testId, aiGoal, userAnswers, testData, userProfile } = requestBody

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞ Gemini
    const geminiApiKey = Deno.env.get('GEMINI_API_KEY')
    if (!geminiApiKey) {
      throw new Error('GEMINI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const analysisData = {
      testTitle: testData.title,
      testDescription: testData.description,
      userName: userProfile.full_name,
      goal: aiGoal,
      answers: userAnswers.map((answer, index) => ({
        question: testData.questions[index]?.question_text || `–í–æ–ø—Ä–æ—Å ${index + 1}`,
        answer: answer.selected_text || answer.answer_text || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞',
        points: answer.points_earned || 0
      }))
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini
    const prompt = `
–í—ã - –æ–ø—ã—Ç–Ω—ã–π –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –∏ –¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

–¶–ï–õ–¨ –ê–ù–ê–õ–ò–ó–ê:
${aiGoal}

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï:
–ò–º—è: ${analysisData.userName}
–¢–µ—Å—Ç: ${analysisData.testTitle}
${analysisData.testDescription ? `–û–ø–∏—Å–∞–Ω–∏–µ: ${analysisData.testDescription}` : ''}

–û–¢–í–ï–¢–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
${analysisData.answers.map((item, i) => `
${i + 1}. ${item.question}
–û—Ç–≤–µ—Ç: ${item.answer}
–ë–∞–ª–ª—ã: ${item.points}
`).join('')}

–ó–ê–î–ê–ß–ê:
–û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Ü–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ—Ç–≤–µ—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ:
1. –ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
2. –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
3. –û–±–ª–∞—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è
4. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
5. –†–µ—Å—É—Ä—Å—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:
- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–º
- –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º markdown
- –ü—Ä–∞–∫—Ç–∏—á–Ω—ã–º –∏ –ø—Ä–∏–º–µ–Ω–∏–º—ã–º
- –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –≤ markdown:
# –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è ${analysisData.userName}

## üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
[–í–∞—à –∞–Ω–∞–ª–∏–∑ –∑–¥–µ—Å—å]

## üí™ –í–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
[–í—ã—è–≤–ª–µ–Ω–Ω—ã–µ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã]

## üéØ –û–±–ª–∞—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è
[–ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å]

## üöÄ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
[–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è]

## üìö –ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
[–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —Ä–µ—Å—É—Ä—Å—ã]
`

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini API
    const geminiResponse = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=' + geminiApiKey, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 2048,
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          }
        ]
      })
    })

    if (!geminiResponse.ok) {
      throw new Error(`Gemini API error: ${geminiResponse.statusText}`)
    }

    const geminiData = await geminiResponse.json()
    
    if (!geminiData.candidates || geminiData.candidates.length === 0) {
      throw new Error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini API')
    }

    const recommendations = geminiData.candidates[0].content.parts[0].text

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const { error: insertError } = await supabase
      .from('ai_recommendations')
      .insert({
        test_result_id: testResultId,
        user_id: userId,
        test_id: testId,
        ai_goal: aiGoal,
        user_answers: analysisData.answers,
        recommendations: recommendations
      })

    if (insertError) {
      throw insertError
    }

    return new Response(
      JSON.stringify({ 
        success: true, 
        recommendations: recommendations 
      }),
      { 
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'application/json' 
        } 
      }
    )

  } catch (error) {
    console.error('Error generating AI recommendations:', error)
    
    return new Response(
      JSON.stringify({ 
        success: false, 
        error: error.message 
      }),
      { 
        status: 500,
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'application/json' 
        } 
      }
    )
  }
})

/* To invoke locally:

  1. Run `supabase start` (see: https://supabase.com/docs/reference/cli/supabase-start)
  2. Make an HTTP request:

  curl -i --location --request POST 'http://127.0.0.1:54321/functions/v1/generate-ai-recommendations' \
    --header 'Authorization: Bearer YOUR_ANON_KEY' \
    --header 'Content-Type: application/json' \
    --data '{"testResultId":"...","userId":"...","testId":"...","aiGoal":"...","userAnswers":[],"testData":{},"userProfile":{}}'

*/