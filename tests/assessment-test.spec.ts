import { test, expect } from '@playwright/test';

test.describe('Assessment Test Functionality', () => {
  test.beforeEach(async ({ page }) => {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await page.goto('http://localhost:8082');
  });

  test('should create assessment test in admin panel', async ({ page }) => {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ü–µ–Ω–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...');
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    await page.goto('http://localhost:8082/admin');
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await page.waitForLoadState('networkidle');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    await expect(page.locator('h1')).toContainText('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å');
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç"
    const createTestButton = page.locator('button', { hasText: '–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç' }).first();
    await expect(createTestButton).toBeVisible();
    await createTestButton.click();
    
    // –ñ–¥–µ–º –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞
    await page.waitForSelector('[role="dialog"]');
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
    await page.fill('input[name="title"]', '–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ü–µ–Ω–æ—á–Ω—ã–π —Ç–µ—Å—Ç');
    await page.fill('textarea[name="description"]', '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ü–µ–Ω–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞');
    
    // –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø —Ç–µ—Å—Ç–∞ "assessment"
    await page.click('button[role="combobox"]'); // –û—Ç–∫—Ä—ã–≤–∞–µ–º Select –¥–ª—è test_type
    await page.waitForSelector('[role="option"]');
    await page.click('[role="option"][data-value="assessment"]');
    
    // –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    const categorySelects = page.locator('button[role="combobox"]');
    await categorySelects.nth(1).click(); // –í—Ç–æ—Ä–æ–π select –¥–ª—è category
    await page.waitForSelector('[role="option"]');
    await page.click('[role="option"]'); // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    await page.fill('input[name="time_limit"]', '30');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
    await page.click('button[type="submit"]');
    
    // –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
    await page.waitForSelector('.toast', { timeout: 10000 });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ
    await expect(page.locator('text=–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ü–µ–Ω–æ—á–Ω—ã–π —Ç–µ—Å—Ç')).toBeVisible();
    await expect(page.locator('text=–û—Ü–µ–Ω–æ—á–Ω—ã–π')).toBeVisible();
    
    console.log('‚úÖ –û—Ü–µ–Ω–æ—á–Ω—ã–π —Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
  });

  test('should display assessment scales in test taking interface', async ({ page }) => {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ—Ü–µ–Ω–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ—Å—Ç —Å assessment_scales
    const testId = '4cf1b10a-4418-4b4b-8195-db432d216c73';
    await page.goto(`http://localhost:8082/test/${testId}`);
    
    await page.waitForLoadState('networkidle');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
    await expect(page.locator('h1')).toBeVisible();
    
    // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ü–µ–Ω–æ—á–Ω—ã–π —Ç–µ—Å—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —à–∫–∞–ª—ã –æ—Ü–µ–Ω–æ–∫
    const assessmentInfo = page.locator('text=–û—Ü–µ–Ω–æ—á–Ω—ã–π —Ç–µ—Å—Ç');
    if (await assessmentInfo.isVisible()) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω –æ—Ü–µ–Ω–æ—á–Ω—ã–π —Ç–µ—Å—Ç');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —à–∫–∞–ª—ã –æ—Ü–µ–Ω–æ–∫
      await expect(page.locator('text=–ü–ª–æ—Ö–æ –≤–ª–∞–¥–µ—é')).toBeVisible();
      await expect(page.locator('text=–ë–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏')).toBeVisible();
      await expect(page.locator('text=–•–æ—Ä–æ—à–æ –≤–ª–∞–¥–µ—é')).toBeVisible();
      await expect(page.locator('text=–û—Ç–ª–∏—á–Ω–æ –≤–ª–∞–¥–µ—é')).toBeVisible();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–ª—ã
      await expect(page.locator('text=1 –±–∞–ª–ª')).toBeVisible();
      await expect(page.locator('text=2 –±–∞–ª–ª–∞')).toBeVisible();
      await expect(page.locator('text=3 –±–∞–ª–ª–∞')).toBeVisible();
      await expect(page.locator('text=4 –±–∞–ª–ª–∞')).toBeVisible();
      
      console.log('‚úÖ –®–∫–∞–ª–∞ –æ—Ü–µ–Ω–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      
      // –í—ã–±–∏—Ä–∞–µ–º –æ—Ü–µ–Ω–∫—É
      await page.click('input[value*=""]'); // –ü–µ—Ä–≤—ã–π radio button
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
      await page.click('button:has-text("–°–ª–µ–¥—É—é—â–∏–π")');
      
      console.log('‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    } else {
      console.log('‚ÑπÔ∏è  –¢–µ—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ü–µ–Ω–æ—á–Ω—ã–º, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å');
      
      // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
      const radioButtons = page.locator('input[type="radio"]');
      await expect(radioButtons.first()).toBeVisible();
    }
  });

  test('should complete assessment test and show results', async ({ page }) => {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...');
    
    const testId = '4cf1b10a-4418-4b4b-8195-db432d216c73';
    await page.goto(`http://localhost:8082/test/${testId}`);
    
    await page.waitForLoadState('networkidle');
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
    const totalQuestions = await page.locator('.grid button').count();
    console.log(`üìù –ù–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${totalQuestions}`);
    
    for (let i = 0; i < totalQuestions; i++) {
      // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç
      const options = page.locator('input[type="radio"]');
      const optionsCount = await options.count();
      
      if (optionsCount > 0) {
        const randomIndex = Math.floor(Math.random() * optionsCount);
        await options.nth(randomIndex).click();
        
        console.log(`‚úÖ –í–æ–ø—Ä–æ—Å ${i + 1}: –≤—ã–±—Ä–∞–Ω –æ—Ç–≤–µ—Ç ${randomIndex + 1}`);
      }
      
      // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
      if (i < totalQuestions - 1) {
        await page.click('button:has-text("–°–ª–µ–¥—É—é—â–∏–π")');
        await page.waitForTimeout(500);
      } else {
        // –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å - –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
        await page.click('button:has-text("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç")');
        console.log('üèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
      }
    }
    
    // –ñ–¥–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    await page.waitForURL(/\/test\/.*\/result/, { timeout: 10000 });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    await expect(page.locator('h1')).toContainText('–∑–∞–≤–µ—Ä—à–µ–Ω');
    
    // –î–ª—è –æ—Ü–µ–Ω–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const selfAssessmentText = page.locator('text=—Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞');
    if (await selfAssessmentText.isVisible()) {
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      await expect(page.locator('text=–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')).toBeVisible();
      await expect(page.locator('text=—Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞')).toBeVisible();
    } else {
      console.log('‚ÑπÔ∏è  –û–±—ã—á–Ω—ã–π —Ç–µ—Å—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
      await expect(page.locator('text=–±–∞–ª–ª')).toBeVisible();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏ –±–∞–ª–ª–æ–≤
    await expect(page.locator('text=%')).toBeVisible();
    await expect(page.locator('text=–±–∞–ª–ª')).toBeVisible();
    
    console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  });

  test('should show assessment badge in test list', async ({ page }) => {
    console.log('üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–π–¥–∂–∞ –æ—Ü–µ–Ω–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...');
    
    await page.goto('http://localhost:8082/tests');
    await page.waitForLoadState('networkidle');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤
    const testCards = page.locator('.card');
    const testCount = await testCards.count();
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${testCount}`);
    
    // –ò—â–µ–º –æ—Ü–µ–Ω–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã
    const assessmentBadges = page.locator('text=–û—Ü–µ–Ω–æ—á–Ω—ã–π');
    const assessmentCount = await assessmentBadges.count();
    console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ –æ—Ü–µ–Ω–æ—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${assessmentCount}`);
    
    if (assessmentCount > 0) {
      await expect(assessmentBadges.first()).toBeVisible();
      console.log('‚úÖ –ë–µ–π–¥–∂ –æ—Ü–µ–Ω–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è');
    } else {
      console.log('‚ÑπÔ∏è  –û—Ü–µ–Ω–æ—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
  });
});