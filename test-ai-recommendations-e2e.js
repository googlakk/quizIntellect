// End-to-End —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ò–ò —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å Playwright
const { test, expect } = require('@playwright/test');

test.describe('–ò–ò –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', () => {
  let page;
  let logs = [];
  let errors = [];

  test.beforeEach(async ({ browser }) => {
    page = await browser.newPage();
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –ª–æ–≥–∏ –∫–æ–Ω—Å–æ–ª–∏
    page.on('console', (message) => {
      const log = {
        type: message.type(),
        text: message.text(),
        timestamp: new Date().toISOString()
      };
      logs.push(log);
      console.log(`[${log.type.toUpperCase()}] ${log.text}`);
    });

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
    page.on('pageerror', (error) => {
      const errorInfo = {
        message: error.message,
        stack: error.stack,
        timestamp: new Date().toISOString()
      };
      errors.push(errorInfo);
      console.error('‚ùå PAGE ERROR:', error.message);
    });

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    page.on('response', async (response) => {
      if (response.url().includes('functions/v1/generate-ai-recommendations')) {
        const responseInfo = {
          url: response.url(),
          status: response.status(),
          statusText: response.statusText(),
          timestamp: new Date().toISOString()
        };
        
        console.log('üåê EDGE FUNCTION RESPONSE:', responseInfo);
        
        try {
          const body = await response.text();
          console.log('üìÑ RESPONSE BODY:', body);
        } catch (e) {
          console.log('‚ö†Ô∏è Could not read response body');
        }
      }
    });

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    page.on('requestfailed', (request) => {
      if (request.url().includes('functions/v1/generate-ai-recommendations')) {
        console.error('‚ùå NETWORK REQUEST FAILED:', {
          url: request.url(),
          method: request.method(),
          failure: request.failure()
        });
      }
    });
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', async () => {
    console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    await page.goto('http://localhost:8084');
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await expect(page.locator('text=QuizIntellect')).toBeVisible({ timeout: 10000 });
    
    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ');
  });

  test('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Edge —Ñ—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', async () => {
    console.log('üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º Edge —Ñ—É–Ω–∫—Ü–∏—é —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å...');
    
    try {
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      await page.goto('http://localhost:8084');
      
      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
      await page.waitForTimeout(2000);
      
      // –ò—â–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å –∏–ª–∏ —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
      const hasAdminButton = await page.locator('text=–ê–¥–º–∏–Ω').isVisible();
      
      if (hasAdminButton) {
        console.log('üîë –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å...');
        await page.click('text=–ê–¥–º–∏–Ω');
        
        // –ò—â–µ–º –≤–∫–ª–∞–¥–∫—É "–¢–µ—Å—Ç –ò–ò"
        const hasTestTab = await page.locator('text=–¢–µ—Å—Ç –ò–ò').isVisible();
        
        if (hasTestTab) {
          console.log('üß™ –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ò–ò...');
          await page.click('text=–¢–µ—Å—Ç –ò–ò');
          
          // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          const testButton = page.locator('button:has-text("–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ò–ò —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")');
          
          if (await testButton.isVisible()) {
            console.log('üéØ –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
            
            // –û—á–∏—â–∞–µ–º –ª–æ–≥–∏ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
            logs = [];
            errors = [];
            
            await testButton.click();
            
            // –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
            await page.waitForTimeout(10000);
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            console.log('\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:');
            console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤:', logs.length);
            console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫:', errors.length);
            
            // –ò—â–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ª–æ–≥–∏
            const aiLogs = logs.filter(log => 
              log.text.includes('Edge —Ñ—É–Ω–∫—Ü–∏') || 
              log.text.includes('Gemini') ||
              log.text.includes('—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏')
            );
            
            console.log('–ò–ò-—Å–≤—è–∑–∞–Ω–Ω—ã–µ –ª–æ–≥–∏:', aiLogs);
            
            if (errors.length > 0) {
              console.log('\n‚ùå –û–®–ò–ë–ö–ò:');
              errors.forEach((error, i) => {
                console.log(`${i + 1}. ${error.message}`);
              });
            }
            
          } else {
            console.log('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ò–ò –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
          }
        } else {
          console.log('‚ö†Ô∏è –í–∫–ª–∞–¥–∫–∞ "–¢–µ—Å—Ç –ò–ò" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
      } else {
        console.log('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ "–ê–¥–º–∏–Ω" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error.message);
    }
  });

  test('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å Edge —Ñ—É–Ω–∫—Ü–∏–µ–π', async () => {
    console.log('üîç –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É Edge —Ñ—É–Ω–∫—Ü–∏–∏...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Supabase
    try {
      await page.goto('http://localhost:8084');
      await page.waitForTimeout(2000);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ
      const diagnosticResult = await page.evaluate(async () => {
        const results = {
          supabaseLoaded: false,
          functions: null,
          error: null
        };
        
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Supabase
          if (window.supabase) {
            results.supabaseLoaded = true;
          }
          
          // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å Edge —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
          const testData = {
            testResultId: 'test-123',
            userId: 'user-456',
            testId: 'test-789',
            aiGoal: '–¢–µ—Å—Ç',
            userAnswers: [],
            testData: { title: '–¢–µ—Å—Ç', questions: [] },
            userProfile: { full_name: '–¢–µ—Å—Ç' }
          };
          
          if (window.supabase && window.supabase.functions) {
            const response = await window.supabase.functions.invoke('generate-ai-recommendations', {
              body: testData
            });
            
            results.functions = {
              data: response.data,
              error: response.error
            };
          }
          
        } catch (err) {
          results.error = err.message;
        }
        
        return results;
      });
      
      console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:');
      console.log('Supabase –∑–∞–≥—Ä—É–∂–µ–Ω:', diagnosticResult.supabaseLoaded);
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏:', diagnosticResult.functions);
      console.log('–û—à–∏–±–∫–∏:', diagnosticResult.error);
      
      // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      if (!diagnosticResult.supabaseLoaded) {
        console.log('\nüîß –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Supabase');
        console.log('- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        console.log('- –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Supabase –ø—Ä–æ–µ–∫—Ç –∞–∫—Ç–∏–≤–µ–Ω');
      }
      
      if (diagnosticResult.functions?.error) {
        console.log('\nüîß –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–±–ª–µ–º–∞ —Å Edge —Ñ—É–Ω–∫—Ü–∏–µ–π');
        console.log('- –†–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é: supabase functions deploy generate-ai-recommendations');
        console.log('- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ GEMINI_API_KEY –≤ Function Secrets');
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.message);
    }
  });

  test.afterEach(async () => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const logSummary = {
      timestamp: new Date().toISOString(),
      totalLogs: logs.length,
      totalErrors: errors.length,
      logs: logs,
      errors: errors
    };
    
    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    console.log('\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');
    console.log('–í—Å–µ–≥–æ –ª–æ–≥–æ–≤:', logs.length);
    console.log('–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫:', errors.length);
    
    if (errors.length > 0) {
      console.log('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò:');
      errors.forEach((error, i) => {
        console.log(`${i + 1}. ${error.message}`);
      });
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    console.log('\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    if (errors.some(e => e.message.includes('Edge Function'))) {
      console.log('1. –†–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ Edge —Ñ—É–Ω–∫—Ü–∏—é: supabase functions deploy generate-ai-recommendations');
    }
    if (errors.some(e => e.message.includes('GEMINI_API_KEY'))) {
      console.log('2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ GEMINI_API_KEY –≤ Edge Function Secrets');
    }
    if (logs.some(l => l.text.includes('network') && l.type === 'error')) {
      console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ —Å—Ç–∞—Ç—É—Å Supabase');
    }
    
    await page.close();
  });
});