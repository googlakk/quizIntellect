import { createClient } from '@supabase/supabase-js';

const supabaseUrl = "https://xumczqtfbqazkhqrtmxf.supabase.co";
const supabaseKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inh1bWN6cXRmYnFhemtocXJ0bXhmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU0MTUxMjMsImV4cCI6MjA3MDk5MTEyM30.JEiLalLryC7njKJSxKam9BXXrcmk4O5ZEAGKVMJAu2Q";

const supabase = createClient(supabaseUrl, supabaseKey);

async function createAssessmentTest() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ü–µ–Ω–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    const { data: categories } = await supabase
      .from('categories')
      .select('id, name')
      .limit(1);
    
    if (!categories || categories.length === 0) {
      console.error('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
      return;
    }
    
    console.log('üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', categories[0].name);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç
    const testData = {
      title: '–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ü–µ–Ω–æ—á–Ω—ã–π —Ç–µ—Å—Ç - –ù–∞–≤—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è',
      description: '–û—Ü–µ–Ω–∏—Ç–µ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∞—Å–ø–µ–∫—Ç–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è',
      category_id: categories[0].id,
      time_limit_minutes: null,
      max_score: 16, // 4 –≤–æ–ø—Ä–æ—Å–∞ –ø–æ 4 –±–∞–ª–ª–∞ –º–∞–∫—Å–∏–º—É–º
      is_active: true,
      test_type: 'assessment'
    };
    
    console.log('üìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç...');
    const { data: createdTest, error: testError } = await supabase
      .from('tests')
      .insert(testData)
      .select()
      .single();
    
    if (testError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞:', testError);
      return;
    }
    
    console.log('‚úÖ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω:', createdTest.id);
    
    // –°–æ–∑–¥–∞–µ–º —à–∫–∞–ª—É –æ—Ü–µ–Ω–æ–∫
    const defaultScales = [
      { label: '–ü–ª–æ—Ö–æ –≤–ª–∞–¥–µ—é', points: 1, order_index: 1 },
      { label: '–ù–æ—Ä–º–∞–ª—å–Ω–æ –≤–ª–∞–¥–µ—é', points: 2, order_index: 2 },
      { label: '–•–æ—Ä–æ—à–æ –≤–ª–∞–¥–µ—é', points: 3, order_index: 3 },
      { label: '–û—Ç–ª–∏—á–Ω–æ –≤–ª–∞–¥–µ—é', points: 4, order_index: 4 }
    ];
    
    const scalesData = defaultScales.map(scale => ({
      ...scale,
      test_id: createdTest.id
    }));
    
    console.log('üìä –°–æ–∑–¥–∞–µ–º —à–∫–∞–ª—É –æ—Ü–µ–Ω–æ–∫...');
    const { error: scalesError } = await supabase
      .from('assessment_scales')
      .insert(scalesData);
    
    if (scalesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∫–∞–ª—ã:', scalesError);
      return;
    }
    
    console.log('‚úÖ –®–∫–∞–ª–∞ –æ—Ü–µ–Ω–æ–∫ —Å–æ–∑–¥–∞–Ω–∞');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    const questions = [
      '–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ —Ä–∞–±–æ—Ç—ã —Å JavaScript?',
      '–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ —Ä–∞–±–æ—Ç—ã —Å React?',
      '–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö?',
      '–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è?'
    ];
    
    console.log('‚ùì –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã...');
    for (let i = 0; i < questions.length; i++) {
      const questionData = {
        test_id: createdTest.id,
        question_text: questions[i],
        question_type: 'single_choice',
        points: 4, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã
        order_index: i + 1
      };
      
      const { data: question, error: questionError } = await supabase
        .from('questions')
        .insert(questionData)
        .select()
        .single();
      
      if (questionError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ ${i + 1}:`, questionError);
        continue;
      }
      
      console.log(`‚úÖ –í–æ–ø—Ä–æ—Å ${i + 1} —Å–æ–∑–¥–∞–Ω:`, question.id);
    }
    
    console.log('üéâ –û—Ü–µ–Ω–æ—á–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–∑–¥–∞–Ω!');
    console.log(`üîó ID —Ç–µ—Å—Ç–∞: ${createdTest.id}`);
    console.log(`üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${createdTest.title}`);
    console.log(`üîó –°—Å—ã–ª–∫–∞: http://localhost:8082/test/${createdTest.id}`);
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

createAssessmentTest();