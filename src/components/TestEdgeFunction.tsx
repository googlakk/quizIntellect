import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { supabase } from '@/integrations/supabase/client';
import { Loader2, CheckCircle, XCircle, Zap } from 'lucide-react';

const TestEdgeFunction = () => {
  const [testing, setTesting] = useState(false);
  const [result, setResult] = useState<any>(null);
  const [error, setError] = useState<string | null>(null);

  const testFunction = async () => {
    setTesting(true);
    setResult(null);
    setError(null);

    try {
      console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Edge —Ñ—É–Ω–∫—Ü–∏—é...');

      // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      const testData = {
        testResultId: 'test-result-123',
        userId: 'test-user-456',
        testId: 'test-789',
        aiGoal: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ü–∏—Ñ—Ä–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Ö —É–ª—É—á—à–µ–Ω–∏—é',
        userAnswers: [
          { 
            question: '–†–∞–±–æ—Ç–∞ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º', 
            answer: '–•–æ—Ä–æ—à–æ –≤–ª–∞–¥–µ—é', 
            points: 3,
            selected_text: '–•–æ—Ä–æ—à–æ –≤–ª–∞–¥–µ—é'
          },
          { 
            question: '–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤', 
            answer: '–°—Ä–µ–¥–Ω–µ –≤–ª–∞–¥–µ—é', 
            points: 2,
            selected_text: '–°—Ä–µ–¥–Ω–µ –≤–ª–∞–¥–µ—é'
          }
        ],
        testData: {
          title: '–¢–µ—Å—Ç —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π',
          description: '–û—Ü–µ–Ω–∫–∞ –±–∞–∑–æ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º',
          questions: [
            { question_text: '–†–∞–±–æ—Ç–∞ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º', points: 4 },
            { question_text: '–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤', points: 4 }
          ]
        },
        userProfile: {
          full_name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        }
      };

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –¥–∞–Ω–Ω—ã–º–∏:', testData);

      const { data, error } = await supabase.functions.invoke('generate-ai-recommendations', {
        body: testData
      });

      console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', { data, error });

      if (error) {
        throw new Error(`Edge Function Error: ${JSON.stringify(error)}`);
      }

      setResult(data);
      
    } catch (err: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
      setError(err.message);
    } finally {
      setTesting(false);
    }
  };

  return (
    <Card className="w-full max-w-2xl mx-auto">
      <CardHeader>
        <CardTitle className="flex items-center space-x-2">
          <Zap className="w-5 h-5 text-primary" />
          <span>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Edge —Ñ—É–Ω–∫—Ü–∏–∏</span>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <Button 
          onClick={testFunction} 
          disabled={testing}
          className="w-full"
        >
          {testing ? (
            <>
              <Loader2 className="w-4 h-4 mr-2 animate-spin" />
              –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...
            </>
          ) : (
            <>
              <Zap className="w-4 h-4 mr-2" />
              –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ò–ò —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            </>
          )}
        </Button>

        {error && (
          <Alert variant="destructive">
            <XCircle className="w-4 h-4" />
            <AlertDescription>
              <strong>–û—à–∏–±–∫–∞:</strong> {error}
              <br />
              <br />
              <strong>–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:</strong>
              <ul className="list-disc list-inside mt-2 space-y-1">
                <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞ –ª–∏ Edge —Ñ—É–Ω–∫—Ü–∏—è: <code>supabase functions deploy generate-ai-recommendations</code></li>
                <li>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ GEMINI_API_KEY –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ Edge Function Secrets</li>
                <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ Supabase Dashboard</li>
              </ul>
            </AlertDescription>
          </Alert>
        )}

        {result && (
          <Alert>
            <CheckCircle className="w-4 h-4" />
            <AlertDescription>
              <strong>–£—Å–ø–µ—Ö!</strong> Edge —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
              <br />
              <Badge variant="secondary" className="mt-2">
                {result.success ? '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã' : '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'}
              </Badge>
              {result.recommendations && (
                <details className="mt-2">
                  <summary className="cursor-pointer font-medium">–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</summary>
                  <pre className="mt-2 p-2 bg-muted rounded text-sm whitespace-pre-wrap">
                    {result.recommendations.substring(0, 500)}...
                  </pre>
                </details>
              )}
            </AlertDescription>
          </Alert>
        )}

        <div className="text-sm text-muted-foreground">
          <p><strong>–ß—Ç–æ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è:</strong></p>
          <ul className="list-disc list-inside space-y-1">
            <li>–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Edge —Ñ—É–Ω–∫—Ü–∏–∏</li>
            <li>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gemini API</li>
            <li>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ò–ò —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π</li>
            <li>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö</li>
          </ul>
        </div>
      </CardContent>
    </Card>
  );
};

export default TestEdgeFunction;