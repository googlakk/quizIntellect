import { createClient } from '@supabase/supabase-js';

const supabaseUrl = "https://xumczqtfbqazkhqrtmxf.supabase.co";
const supabaseKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inh1bWN6cXRmYnFhemtocXJ0bXhmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU0MTUxMjMsImV4cCI6MjA3MDk5MTEyM30.JEiLalLryC7njKJSxKam9BXXrcmk4O5ZEAGKVMJAu2Q";

const supabase = createClient(supabaseUrl, supabaseKey);

async function updateTestType() {
  console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø —Ç–µ—Å—Ç–∞ –Ω–∞ assessment...');
  
  const testId = '4cf1b10a-4418-4b4b-8195-db432d216c73';
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const { data: currentTest } = await supabase
      .from('tests')
      .select('id, title, test_type, max_score')
      .eq('id', testId)
      .single();
    
    console.log('üìã –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞:');
    console.log(`   ID: ${currentTest.id}`);
    console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${currentTest.title}`);
    console.log(`   –¢–∏–ø: ${currentTest.test_type}`);
    console.log(`   –ú–∞–∫—Å. –±–∞–ª–ª: ${currentTest.max_score}`);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ RPC –∏–ª–∏ –ø—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    const { data: updatedTest, error } = await supabase
      .from('tests')
      .update({ 
        test_type: 'assessment',
        max_score: 20 // 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ 4 –±–∞–ª–ª–∞ –º–∞–∫—Å–∏–º—É–º
      })
      .eq('id', testId)
      .select();
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞:', error);
      
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ SQL
      console.log('üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥...');
      
    } else {
      console.log('‚úÖ –¢–∏–ø —Ç–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ assessment');
      console.log('   –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', updatedTest[0]);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ assessment_scales –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
    const { data: scales } = await supabase
      .from('assessment_scales')
      .select('*')
      .eq('test_id', testId)
      .order('order_index');
    
    console.log(`\nüìä –®–∫–∞–ª–∞ –æ—Ü–µ–Ω–æ–∫: ${scales?.length || 0} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    if (scales && scales.length > 0) {
      scales.forEach(scale => {
        console.log(`   - ${scale.label}: ${scale.points} –±–∞–ª–ª–æ–≤`);
      });
    }
    
    // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫ —Ç–µ—Å—Ç –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è
    const { data: testData } = await supabase
      .from('tests')
      .select(`
        *,
        categories:category_id (name),
        questions (
          id,
          question_text,
          question_type,
          points
        ),
        assessment_scales (
          id,
          label,
          points,
          order_index
        )
      `)
      .eq('id', testId)
      .single();
    
    console.log('\nüß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–∞:');
    console.log(`   –¢–∏–ø: ${testData.test_type}`);
    console.log(`   –í–æ–ø—Ä–æ—Å–æ–≤: ${testData.questions?.length || 0}`);
    console.log(`   –®–∫–∞–ª–∞: ${testData.assessment_scales?.length || 0} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    
    if (testData.test_type === 'assessment' && testData.assessment_scales?.length > 0) {
      console.log('\n‚úÖ –¢–µ—Å—Ç –≥–æ—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ –æ—Ü–µ–Ω–æ—á–Ω—ã–π!');
      console.log(`üîó –°—Å—ã–ª–∫–∞: http://localhost:8082/test/${testId}`);
    } else {
      console.log('\n‚ö†Ô∏è  –¢–µ—Å—Ç –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ –æ—Ü–µ–Ω–æ—á–Ω—ã–π');
    }
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

updateTestType();