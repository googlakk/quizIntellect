import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = "https://xumczqtfbqazkhqrtmxf.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inh1bWN6cXRmYnFhemtocXJ0bXhmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU0MTUxMjMsImV4cCI6MjA3MDk5MTEyM30.JEiLalLryC7njKJSxKam9BXXrcmk4O5ZEAGKVMJAu2Q";

const supabase = createClient(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

async function checkTestResults() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
    const { data: testResults, error: resultsError } = await supabase
      .from('test_results')
      .select(`
        id,
        test_id,
        user_id,
        score,
        max_score,
        percentage,
        time_taken_minutes,
        completed_at,
        tests!inner(title)
      `)
      .order('completed_at', { ascending: false })
      .limit(10);
    
    if (resultsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤:', resultsError.message);
      return;
    }

    if (!testResults || testResults.length === 0) {
      console.log('‚ö†Ô∏è  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      console.log('   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   1. –ù–∏ –æ–¥–∏–Ω —Ç–µ—Å—Ç –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω');
      console.log('   2. –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞');
      console.log('   3. RLS-–ø–æ–ª–∏—Ç–∏–∫–∏ –±–ª–æ–∫–∏—Ä—É—é—Ç –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º');
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${testResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤:`);
    testResults.forEach((result, index) => {
      console.log(`   ${index + 1}. –¢–µ—Å—Ç: "${result.tests.title}"`);
      console.log(`      –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.score}/${result.max_score} (${Math.round(result.percentage)}%)`);
      console.log(`      –î–∞—Ç–∞: ${new Date(result.completed_at).toLocaleString('ru-RU')}`);
      console.log(`      –í—Ä–µ–º—è: ${result.time_taken_minutes || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'} –º–∏–Ω`);
      console.log('');
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { data: userAnswers, error: answersError } = await supabase
      .from('user_answers')
      .select('test_result_id, is_correct, points_earned')
      .limit(5);
    
    if (answersError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', answersError.message);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${userAnswers?.length || 0} –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
    const { data: activeTests, error: testsError } = await supabase
      .from('tests')
      .select('id, title, is_active')
      .eq('is_active', true);
    
    if (testsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', testsError.message);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${activeTests?.length || 0} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤`);
    }

  } catch (error) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

checkTestResults().catch(console.error);