import { createClient } from '@supabase/supabase-js';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Supabase
const supabaseUrl = "https://xumczqtfbqazkhqrtmxf.supabase.co";
const supabaseKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inh1bWN6cXRmYnFhemtocXJ0bXhmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU0MTUxMjMsImV4cCI6MjA3MDk5MTEyM30.JEiLalLryC7njKJSxKam9BXXrcmk4O5ZEAGKVMJAu2Q";

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkDatabase() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ subjects
  try {
    const { data: subjectsData, error: subjectsError } = await supabase
      .from('subjects')
      .select('*')
      .limit(1);
    
    if (!subjectsError) {
      console.log('‚ùå –ù–ê–ô–î–ï–ù–ê –°–¢–ê–†–ê–Ø –¢–ê–ë–õ–ò–¶–ê: subjects');
      console.log('   –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n');
    }
  } catch (error) {
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ subjects –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (—ç—Ç–æ —Ö–æ—Ä–æ—à–æ)');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ categories
  try {
    const { data: categoriesData, error: categoriesError } = await supabase
      .from('categories')
      .select('*')
      .limit(5);
    
    if (categoriesError) {
      console.log('‚ùå –¢–ê–ë–õ–ò–¶–ê categories –ù–ï –ù–ê–ô–î–ï–ù–ê');
      console.log('   –û—à–∏–±–∫–∞:', categoriesError.message);
      console.log('\nüìã –ù–ï–û–ë–•–û–î–ò–ú–´–ï –î–ï–ô–°–¢–í–ò–Ø:');
      console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ Supabase Dashboard');
      console.log('2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ SQL Editor');
      console.log('3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ migrate_subjects_to_categories.sql');
      console.log('4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n');
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ categories –Ω–∞–π–¥–µ–Ω–∞');
      console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–¥–µ–ª–æ–≤: ${categoriesData?.length || 0}`);
      if (categoriesData && categoriesData.length > 0) {
        console.log('   –†–∞–∑–¥–µ–ª—ã:');
        categoriesData.forEach(cat => {
          console.log(`   - ${cat.name}`);
        });
      }
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã categories:', error.message);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É tests
  try {
    const { data: testsData, error: testsError } = await supabase
      .from('tests')
      .select('id, title, category_id')
      .limit(1);
    
    if (testsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã tests:', testsError.message);
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ tests –¥–æ—Å—Ç—É–ø–Ω–∞');
      if (testsData && testsData.length > 0) {
        const firstTest = testsData[0];
        if (firstTest.category_id) {
          console.log('‚úÖ –ü–æ–ª–µ category_id –Ω–∞–π–¥–µ–Ω–æ –≤ tests');
        }
      }
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã tests:', error.message);
  }
}

checkDatabase().catch(console.error);