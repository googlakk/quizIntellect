import { test, expect } from '@playwright/test';

test.describe('Assessment Test Check', () => {
  test('should check assessment test functionality', async ({ page }) => {
    console.log('üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ—Ü–µ–Ω–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...');
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–µ—Å—Ç—É
    const testId = '4cf1b10a-4418-4b4b-8195-db432d216c73';
    await page.goto(`http://localhost:8082/test/${testId}`);
    await page.waitForLoadState('networkidle');
    
    console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–µ—Å—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    await page.screenshot({ 
      path: 'assessment-test-page.png',
      fullPage: true 
    });
    console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: assessment-test-page.png');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const pageTitle = await page.title();
    console.log(`üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${pageTitle}`);
    
    // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ—Å—Ç–∞
    const h1Elements = page.locator('h1');
    const h1Count = await h1Elements.count();
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ H1 —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${h1Count}`);
    
    if (h1Count > 0) {
      const firstH1 = await h1Elements.first().textContent();
      console.log(`   –ü–µ—Ä–≤—ã–π H1: ${firstH1}`);
    }
    
    // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–µ—Å—Ç–∞
    const testElements = page.locator('text="–¢–µ—Å—Ç"');
    const testElementsCount = await testElements.count();
    console.log(`üß™ –≠–ª–µ–º–µ–Ω—Ç–æ–≤ —Å "–¢–µ—Å—Ç": ${testElementsCount}`);
    
    // –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
    const cards = page.locator('.card, [class*="card"]');
    const cardsCount = await cards.count();
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: ${cardsCount}`);
    
    // –ò—â–µ–º input —ç–ª–µ–º–µ–Ω—Ç—ã
    const inputs = page.locator('input');
    const inputCount = await inputs.count();
    console.log(`üîò –ù–∞–π–¥–µ–Ω–æ input —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${inputCount}`);
    
    // –ò—â–µ–º radio buttons
    const radioButtons = page.locator('input[type="radio"]');
    const radioCount = await radioButtons.count();
    console.log(`üîò –ù–∞–π–¥–µ–Ω–æ radio buttons: ${radioCount}`);
    
    // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º "–≤–ª–∞–¥–µ—é"
    const ownershipElements = page.locator(':has-text("–≤–ª–∞–¥–µ—é")');
    const ownershipCount = await ownershipElements.count();
    console.log(`üìä –≠–ª–µ–º–µ–Ω—Ç–æ–≤ —Å "–≤–ª–∞–¥–µ—é": ${ownershipCount}`);
    
    // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º "–±–∞–ª–ª"
    const pointElements = page.locator(':has-text("–±–∞–ª–ª")');
    const pointCount = await pointElements.count();
    console.log(`üíØ –≠–ª–µ–º–µ–Ω—Ç–æ–≤ —Å "–±–∞–ª–ª": ${pointCount}`);
    
    // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º "–æ—Ü–µ–Ω–æ—á–Ω—ã–π"
    const assessmentElements = page.locator(':has-text("–æ—Ü–µ–Ω–æ—á–Ω—ã–π"), :has-text("–û—Ü–µ–Ω–æ—á–Ω—ã–π")');
    const assessmentCount = await assessmentElements.count();
    console.log(`üéØ –≠–ª–µ–º–µ–Ω—Ç–æ–≤ —Å "–æ—Ü–µ–Ω–æ—á–Ω—ã–π": ${assessmentCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const buttons = page.locator('button');
    const buttonCount = await buttons.count();
    console.log(`üîò –ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫: ${buttonCount}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    for (let i = 0; i < Math.min(buttonCount, 5); i++) {
      const buttonText = await buttons.nth(i).textContent();
      console.log(`   –ö–Ω–æ–ø–∫–∞ ${i + 1}: ${buttonText?.trim()}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const currentUrl = page.url();
    console.log(`üîó –¢–µ–∫—É—â–∏–π URL: ${currentUrl}`);
    
    // –ò—â–µ–º –ª—é–±—ã–µ –æ—à–∏–±–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const errorElements = page.locator(':has-text("–æ—à–∏–±–∫–∞"), :has-text("–û—à–∏–±–∫–∞"), :has-text("Error")');
    const errorCount = await errorElements.count();
    
    if (errorCount > 0) {
      console.log(`‚ùå –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: ${errorCount}`);
      for (let i = 0; i < errorCount; i++) {
        const errorText = await errorElements.nth(i).textContent();
        console.log(`   –û—à–∏–±–∫–∞ ${i + 1}: ${errorText?.trim()}`);
      }
    } else {
      console.log('‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º HTML –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const bodyContent = await page.locator('body').innerHTML();
    const hasAssessmentScale = bodyContent.includes('–≤–ª–∞–¥–µ—é') && bodyContent.includes('–±–∞–ª–ª');
    const hasQuestionInterface = bodyContent.includes('–≤–æ–ø—Ä–æ—Å') || bodyContent.includes('–í–æ–ø—Ä–æ—Å');
    
    console.log(`üìä –®–∫–∞–ª–∞ –æ—Ü–µ–Ω–æ–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${hasAssessmentScale}`);
    console.log(`‚ùì –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${hasQuestionInterface}`);
    
    // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ü–µ–Ω–æ—á–Ω—ã–π —Ç–µ—Å—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    if (hasAssessmentScale) {
      console.log('üéØ –ù–ê–ô–î–ï–ù –û–¶–ï–ù–û–ß–ù–´–ô –¢–ï–°–¢!');
      
      // –ü—ã—Ç–∞–µ–º—Å—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
      if (radioCount > 0) {
        console.log('üîò –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç...');
        try {
          await radioButtons.first().click();
          console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç');
        } catch (error) {
          console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç:', error.message);
        }
      }
    }
    
    console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');
    console.log(`   ‚úì –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: –î–ê`);
    console.log(`   ‚úì –û—Ü–µ–Ω–æ—á–Ω—ã–π —Ç–µ—Å—Ç: ${hasAssessmentScale ? '–î–ê' : '–ù–ï–¢'}`);
    console.log(`   ‚úì –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–æ–ø—Ä–æ—Å–æ–≤: ${hasQuestionInterface ? '–î–ê' : '–ù–ï–¢'}`);
    console.log(`   ‚úì Radio buttons: ${radioCount > 0 ? '–î–ê' : '–ù–ï–¢'} (${radioCount})`);
    console.log(`   ‚úì –û—à–∏–±–∫–∏: ${errorCount > 0 ? '–ï–°–¢–¨' : '–ù–ï–¢'} (${errorCount})`);
  });
});