import { createClient } from '@supabase/supabase-js';

const supabaseUrl = "https://xumczqtfbqazkhqrtmxf.supabase.co";
const supabaseKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inh1bWN6cXRmYnFhemtocXJ0bXhmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU0MTUxMjMsImV4cCI6MjA3MDk5MTEyM30.JEiLalLryC7njKJSxKam9BXXrcmk4O5ZEAGKVMJAu2Q";

const supabase = createClient(supabaseUrl, supabaseKey);

async function testDatabase() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã tests
  console.log('\n1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É tests...');
  const { data: tests, error: testsError } = await supabase
    .from('tests')
    .select('id, title, test_type')
    .limit(1);
    
  if (testsError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ tests:', testsError);
  } else {
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ tests –¥–æ—Å—Ç—É–ø–Ω–∞');
    console.log('   –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:', tests[0] || '–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã assessment_scales
  console.log('\n2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É assessment_scales...');
  const { data: scales, error: scalesError } = await supabase
    .from('assessment_scales')
    .select('*')
    .limit(1);
    
  if (scalesError) {
    console.error('‚ùå –¢–∞–±–ª–∏—Ü–∞ assessment_scales –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', scalesError.message);
  } else {
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ assessment_scales —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    console.log('   –î–∞–Ω–Ω—ã–µ:', scales);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ test_type –≤ tests
  console.log('\n3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫—É test_type...');
  const { data: testWithType, error: typeError } = await supabase
    .from('tests')
    .select('id, test_type')
    .limit(1);
    
  if (typeError) {
    console.error('‚ùå –ö–æ–ª–æ–Ω–∫–∞ test_type –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', typeError);
  } else {
    console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ test_type –¥–æ—Å—Ç—É–ø–Ω–∞');
    console.log('   –ó–Ω–∞—á–µ–Ω–∏–µ:', testWithType[0]?.test_type || 'null');
  }
}

testDatabase();